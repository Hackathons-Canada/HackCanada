---
import { cn } from "@/lib/utils";
import Image from "astro/components/Image.astro";
import { navLinks, socialLinks } from "@/config/layoutConfig";

const { className } = Astro.props;

// Add this type declaration
declare global {
  interface Window {
    // eslint-disable-next-line
    handleScrollToSection: (section: string) => void;
  }
}
---

<header
  class={cn(
    className,
    "w-full px-6 h-20 mt-4 sm:mt-6 fixed top-0 left-0 right-0 z-50 navbar-animation opacity-0",
  )}
>
  <nav
    class="navbar-bg mx-auto flex max-w-6xl items-center justify-between rounded-[1.8em] border-[0.5px] border-t border-white bg-gradient-to-br from-white/50 to-white/30 px-4 pb-2 pt-2.5 text-center text-black backdrop-blur-md max-sm:flex-col max-sm:px-6 sm:px-6 md:px-6 lg:px-10"
  >
    <div class="flex w-full items-center gap-8 max-lg:justify-between">
      <a href="/" class="logo-animation">
        <Image
          src="/logo-v1.webp"
          alt="logo"
          width={48}
          height={48}
          class="object-contain max-sm:size-10 sm:size-12"
          loading="lazy"
          decoding="async"
          format="webp"
        />
      </a>
      <button
        id="dropdownToggle"
        class="relative flex h-8 w-8 items-center justify-center focus:outline-none sm:hidden"
      >
        <div
          class="menu-line absolute top-1/3 h-[3px] w-6 rounded-full bg-black transition duration-500 ease-in-out"
        >
        </div>
        <div
          class="menu-line absolute top-2/3 h-[3px] w-6 rounded-full bg-black transition duration-500 ease-in-out"
        >
        </div>
      </button>
      <ul class="flex items-center gap-8 max-sm:hidden">
        {
          navLinks.map((link, index) => (
            <li
              class="nav-link-animation group relative font-bold"
              style={`--index: ${index};`}
            >
              <button
                onclick={`window.handleScrollToSection('${link.href}')`}
                class="relative overflow-hidden xl:text-lg"
              >
                {link.label}
                <span class="absolute bottom-0 left-0 h-0.5 w-full origin-left scale-x-0 transform rounded-full bg-black transition-transform duration-300 group-hover:scale-x-100" />
              </button>
            </li>
          ))
        }
      </ul>
    </div>
    <ul class="flex shrink-0 items-center gap-8 max-lg:hidden">
      {
        socialLinks.map((item, index) => (
          <li class="social-icon-animation" style={`--index: ${index};`}>
            <a
              class="relative text-slate-600 transition-transform duration-300 hover:scale-110"
              href={item.href}
              target="_blank"
              rel="noopener noreferrer"
              aria-label={`${new URL(item.href).hostname} page for Hack Canada`}
            >
              <span
                set:html={item.icon({
                  size: 40,
                  color: "#07152e",
                  className:
                    "size-8 hover:scale-110 xl:size-9 transition-transform duration-300",
                })}
              />
            </a>
          </li>
        ))
      }
    </ul>
    <div id="mobileDropdown" class="dropdown hidden w-full py-4 sm:hidden">
      <ul class="flex flex-col gap-y-2.5 pb-4 pt-2 text-center">
        {
          navLinks.map((link) => (
            <li class="navlink pb-1.5 pt-2 text-lg font-semibold">
              <button
                onclick={`window.handleScrollToSection('${link.href}')`}
                class="h-full w-full"
              >
                {link.label}
              </button>
            </li>
          ))
        }
      </ul>
      <ul
        class="socialContainer flex items-center justify-center gap-6 rounded-xl px-4 py-2"
      >
        {
          socialLinks.map((link) => (
            <li class="shrink-0">
              <a
                class="relative text-slate-600 transition-transform duration-300 hover:scale-110"
                href={link.href}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={`${new URL(link.href).hostname} page for Hack Canada`}
              >
                <span
                  set:html={link.icon({
                    size: 40,
                    color: "#07152e",
                    className:
                      "socialLink size-8 hover:scale-110 transition-transform duration-300",
                  })}
                />
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</header>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  const navbar = document.querySelector(".navbar-animation");
  const dropdown = document.querySelector("#mobileDropdown");
  let isDropdownOpen = false;

  const runInitialAnimation = () => {
    if (!navbar) return;

    const tl = gsap.timeline();
    tl.fromTo(
      navbar,
      { y: -100, opacity: 0 },
      { y: 0, opacity: 1, duration: 0.8, ease: "power2.out" },
    )
      .fromTo(
        ".logo-animation",
        { scale: 0, opacity: 0 },
        { scale: 1, opacity: 1, duration: 0.5, ease: "back.out(1.7)" },
        "-=0.4",
      )
      .fromTo(
        ".nav-link-animation",
        { y: 20, opacity: 0 },
        { y: 0, opacity: 1, duration: 0.5, stagger: 0.1, ease: "power2.out" },
        "-=0.3",
      )
      .fromTo(
        ".social-icon-animation",
        { scale: 0, opacity: 0 },
        {
          scale: 1,
          opacity: 1,
          duration: 0.5,
          stagger: 0.1,
          ease: "back.out(1.7)",
        },
        "-=0.3",
      );

    ScrollTrigger.create({
      start: "top top",
      end: "max",
      onUpdate: (self) => {
        if (!dropdown?.classList.contains("hidden")) return;
        gsap.to(navbar, {
          y: self.direction === 1 && self.getVelocity() > 50 ? -100 : 0,
          duration: 0.5,
          ease: "power2.out",
        });
      },
    });
  };

  const toggleDropdown = () => {
    if (!dropdown) return;

    const tl = gsap.timeline();
    if (isDropdownOpen) {
      tl.to(dropdown.querySelectorAll(".socialLink, .navlink"), {
        opacity: 0,
        y: 10,
        stagger: { each: 0.05, from: "end" },
        duration: 0.2,
        ease: "power2.in",
      }).to(dropdown, {
        height: 0,
        duration: 0.1,
        ease: "linear",
        onComplete: () => dropdown.classList.add("hidden"),
      });
    } else {
      dropdown.classList.remove("hidden");
      tl.fromTo(
        dropdown,
        { height: 0 },
        { height: "auto", duration: 0.1, ease: "linear" },
      ).fromTo(
        dropdown.querySelectorAll(".navlink, .socialLink"),
        { opacity: 0, y: 10 },
        {
          opacity: 1,
          y: 0,
          stagger: { each: 0.05, from: "start" },
          duration: 0.2,
          ease: "power2.out",
        },
      );
    }
    isDropdownOpen = !isDropdownOpen;
    document.querySelectorAll(".menu-line").forEach((line, index) => {
      line.classList.toggle(
        index === 0 ? "rotate-[405deg]" : "-rotate-[405deg]",
      );
      line.classList.toggle(
        index === 0 ? "translate-y-[5.5px]" : "-translate-y-[5.5px]",
      );
    });
  };

  const initializeNavbar = () => {
    if (document.readyState === "complete") runInitialAnimation();
    else window.addEventListener("load", runInitialAnimation);
    document.addEventListener("astro:after-swap", runInitialAnimation);

    window.handleScrollToSection = (section: string) => {
      const element = document.getElementById(section);
      if (element) {
        element.scrollIntoView({ behavior: "smooth" });
        if (isDropdownOpen) toggleDropdown();
      }
    };

    document
      .querySelector("#dropdownToggle")
      ?.addEventListener("click", toggleDropdown);
    ScrollTrigger.create({
      start: "top top",
      end: "bottom bottom",
      onUpdate: (self) => {
        const navbarBg = document.querySelector(".navbar-bg");
        if (navbarBg) {
          gsap.to(navbarBg, {
            backgroundColor: `rgba(255, 255, 255, ${0.3 + self.progress * 0.4})`,
            duration: 0.3,
          });
        }
      },
    });
  };

  document.addEventListener("DOMContentLoaded", initializeNavbar);
</script>

<style>
  .navbar-bg {
    transition: background-color 0.3s ease;
  }
</style>
