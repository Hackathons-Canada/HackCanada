---
import FaqToggle from "./FaqToggle.astro";

interface Props {
  question: string;
  answer: string;
}

const { question, answer } = Astro.props;
---

<li
  class="faq-item relative cursor-pointer overflow-hidden rounded-md border-2 border-red-900 p-4 transition-shadow duration-300"
>
  <button
    class="faq-question-container relative flex w-full cursor-pointer items-center justify-between text-left font-baloo text-lg font-semibold"
  >
    <span class="faq-question">{question}</span>
    <FaqToggle isExpanded={false} />
  </button>
  <div
    class="faq-border absolute bottom-0 left-0 top-0 hidden w-1 origin-center bg-red-800"
  >
  </div>
  <p class="faq-answer relative z-10 hidden w-full pt-4 text-black/70">
    {answer}
  </p>
</li>

<script>
  import gsap from "gsap";

  const faqItems = document.querySelectorAll(".faq-item");
  faqItems.forEach((faqItem) => {
    faqItem.addEventListener("click", () => toggleFaq(faqItem));
  });

  function toggleFaq(faqItem: Element) {
    const answerElement = faqItem.querySelector(".faq-answer");
    const button = faqItem.querySelector(".faq-question-container");
    const toggleIcon = faqItem.querySelector(".faq-toggle");
    const faqBorder = faqItem.querySelector(".faq-border");

    if (!button || !answerElement || !toggleIcon || !faqBorder) return;

    // Accessibility
    const isExpanded = button.getAttribute("aria-expanded") === "true";
    button.setAttribute("aria-expanded", isExpanded ? "false" : "true");

    const tl = gsap.timeline();

    if (isExpanded) {
      // Close animations
      tl.to(toggleIcon, { rotate: 0, duration: 0.1 });
      tl.to(
        faqBorder,
        {
          scaleY: 0,
          duration: 0.2,
          ease: "power3.in",
          onComplete: () => {
            faqBorder.classList.add("hidden");
          },
        },
        0,
      );
      tl.to(
        answerElement,
        {
          opacity: 0,
          scaleY: 0,
          duration: 0.2,
          height: 0,
          ease: "back.in",
          onComplete: () => {
            answerElement.classList.add("hidden");
          },
        },
        "-=0.1",
      );
      tl.to(button, { padding: 0, duration: 0.1 });
      tl.to(faqItem, { boxShadow: "none", duration: 0.3 }, "-=0.3"); // Remove shadow on close
    } else {
      // Open animations
      faqBorder.classList.remove("hidden");
      answerElement.classList.remove("hidden");
      tl.to(faqItem, {
        boxShadow: "0 0 20px rgba(255, 0, 0, 0.10)",
        duration: 0.1,
      });
      tl.fromTo(
        faqBorder,
        {
          scaleY: 0,
        },
        {
          scaleY: 1,
          duration: 0.3,
          ease: "power3.out",
        },
        0,
      );
      tl.fromTo(
        answerElement,
        {
          height: 0,
          opacity: 0,
          scaleY: 0.5,
        },
        {
          height: "auto",
          opacity: 1,
          scaleY: 1,
          duration: 0.2,
          ease: "back.out(1.5)",
        },
        0,
      ).to(toggleIcon, { rotate: 45, duration: 0.2 }, 0);
    }
  }
</script>
