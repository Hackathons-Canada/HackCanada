---
interface Props {
  question: string;
  answer: string;
}

const { question, answer } = Astro.props;
---

<li
  class="faq-item group relative cursor-pointer overflow-hidden rounded-md bg-white/30 p-4 transition-shadow duration-300"
>
  <button
    class="faq-question-container relative flex w-full cursor-pointer justify-between gap-2.5 text-left font-baloo font-semibold md:text-lg"
  >
    <span class="faq-question">{question}</span>
    <span class="faq-toggle text-lg md:text-xl">+</span>
  </button>
  <p
    class="faq-answer relative z-10 hidden w-full pt-4 text-slate-600 max-md:text-sm"
  >
    {answer}
  </p>
</li>

<script>
  import gsap from "gsap";

  const faqItems = document.querySelectorAll(".faq-item");
  faqItems.forEach((faqItem) => {
    faqItem.addEventListener("click", () => toggleFaq(faqItem));
  });

  function toggleFaq(faqItem: Element) {
    const answerElement = faqItem.querySelector(".faq-answer");
    const button = faqItem.querySelector(".faq-question-container");
    const toggleIcon = faqItem.querySelector(".faq-toggle");

    if (!button || !answerElement || !toggleIcon) return;

    // Accessibility
    const isExpanded = button.getAttribute("aria-expanded") === "true";
    button.setAttribute("aria-expanded", isExpanded ? "false" : "true");

    const tl = gsap.timeline();

    if (isExpanded) {
      // Close animations
      tl.to(toggleIcon, { rotate: 0, duration: 0.1 })
        .to(
          answerElement,
          {
            opacity: 0,
            scaleY: 0,
            duration: 0.15,
            height: 0,
            ease: "sine.in",
            onComplete: () => {
              answerElement.classList.add("hidden");
            },
          },
          0,
        )
        .to(
          faqItem,
          {
            boxShadow: "none",
            duration: 0.2,
            backgroundColor: "rgba(255, 255, 255, 0.3)",
          },
          0,
        );
    } else {
      // Open animations
      answerElement.classList.remove("hidden");
      tl.to(faqItem, {
        boxShadow: "0 0 24px rgba(0, 0, 0, 0.10)",
        backgroundColor: "rgba(255, 255, 255, 0.7)",
        duration: 0.1,
      })
        .fromTo(
          answerElement,
          {
            height: 0,
            opacity: 0,
            scaleY: 0.5,
          },
          {
            height: "auto",
            opacity: 1,
            scaleY: 1,
            duration: 0.2,
            ease: "back.out(2)",
          },
          0,
        )
        .to(toggleIcon, { rotate: 45, duration: 0.2 });
    }
  }
</script>
