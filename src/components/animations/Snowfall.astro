---
interface Props {
  snowflakeCount?: number;
  speed?: number;
  wind?: number;
  color?: string;
  size?: number;
  enableMouseEffect?: boolean;
}

const {
  snowflakeCount = 200,
  speed = 1,
  wind = 0,
  color = "#ffffff",
  size = 2,
  enableMouseEffect = true,
} = Astro.props;
---

<canvas
  id="snowfall"
  class="pointer-events-none absolute left-0 top-0 h-full w-full"
  aria-hidden="true"></canvas>

<script
  define:vars={{ snowflakeCount, speed, wind, color, size, enableMouseEffect }}
>
  const canvas = document.getElementById("snowfall");
  if (canvas instanceof HTMLCanvasElement) {
    const ctx = canvas.getContext("2d");
    if (ctx) {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;

      const snowflakes = [];
      let mouseX = 0;
      let mouseY = 0;
      let isMouseMoving = false;
      let mouseMoveTimeout;

      for (let i = 0; i < snowflakeCount; i++) {
        snowflakes.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          radius: Math.random() * size + 1,
          speed: Math.random() * speed + 0.5,
          vx: 0,
          vy: 0,
          opacity: 0,
          targetOpacity: Math.random() * 0.5 + 0.3, // Varying opacities for depth
        });
      }

      function drawSnowflakes() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (const flake of snowflakes) {
          ctx.beginPath();
          ctx.arc(flake.x, flake.y, flake.radius, 0, Math.PI * 2, true);
          ctx.fillStyle = `rgba(${parseInt(color.slice(1, 3), 16)}, ${parseInt(color.slice(3, 5), 16)}, ${parseInt(color.slice(5, 7), 16)}, ${flake.opacity})`;
          ctx.fill();
        }
        moveSnowflakes();
        requestAnimationFrame(drawSnowflakes);
      }

      function moveSnowflakes() {
        for (const flake of snowflakes) {
          // Fade in animation
          if (flake.opacity < flake.targetOpacity) {
            flake.opacity += 0.05;
          }

          if (enableMouseEffect && isMouseMoving) {
            const dx = mouseX - flake.x;
            const dy = mouseY - flake.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            const maxDistance = 80; // Maximum distance for mouse influence

            if (distance < maxDistance) {
              const influence = (maxDistance - distance) / maxDistance;
              flake.vx += (dx / distance) * influence * 0.5;
              flake.vy += (dy / distance) * influence * 0.5;
            }
          }

          // Apply velocity with damping
          flake.x += flake.vx;
          flake.y += flake.vy;
          flake.vx *= 0.98;
          flake.vy *= 0.98;

          // Apply normal movement
          flake.y += flake.speed * speed;
          flake.x += Math.sin(flake.y * 0.01) * wind;

          // Boundary checking
          if (flake.x < 0) flake.x = canvas.width;
          if (flake.x > canvas.width) flake.x = 0;
          if (flake.y > canvas.height) {
            flake.x = Math.random() * canvas.width;
            flake.y = -5;
            flake.opacity = 0; // Reset opacity for re-entry
          }
        }
      }

      drawSnowflakes();

      function handleResize() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      }

      function handleMouseMove(e) {
        mouseX = e.clientX;
        mouseY = e.clientY;
        isMouseMoving = true;

        if (mouseMoveTimeout) {
          clearTimeout(mouseMoveTimeout);
        }

        mouseMoveTimeout = setTimeout(() => {
          isMouseMoving = false;
        }, 100);
      }

      window.addEventListener("resize", handleResize);
      if (enableMouseEffect) {
        window.addEventListener("mousemove", handleMouseMove);
      }
    }
  }
</script>
