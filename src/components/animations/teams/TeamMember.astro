---
import { Image } from "astro:assets";
import type { TeamMember as TeamMemberType } from "@/types/teams";
import TeamMemberTooltip from "./TeamMemberTooltip.astro";
import { teamSection } from "@/config/site";

interface Props {
  member: TeamMemberType;
  memberIndex: number;
  compartmentNumber: 1 | 2;
}

const { member, memberIndex, compartmentNumber } = Astro.props;

const memberClass = `team-member-${compartmentNumber} border-1 absolute h-[80px] w-[80px] rounded-full border border-amber-800${compartmentNumber === 1 ? " border-b-transparent" : ""}`;
const memberStyle = `left: ${memberIndex * 90}px; top: ${compartmentNumber === 1 ? "33" : "20"}px;`;

const placeholder = teamSection.placeholder;

// Generate a unique ID for each team member
const memberId = `team-member-${member.id || memberIndex}`;
---

<div class={memberClass} style={memberStyle}>
  <div
    class="team-member-gsap h-full w-full cursor-pointer overflow-hidden rounded-full"
    data-member={JSON.stringify(member)}
  >
    <Image
      src={member.image || placeholder}
      alt={`${member.firstName}'s avatar`}
      width={100}
      height={100}
      class="h-full w-full object-cover"
      loading="lazy"
      decoding="async"
      format="webp"
      id={memberId}
    />
  </div>
  <TeamMemberTooltip member={member} />
</div>

<script is:inline define:vars={{ memberId }}>
  // Inline script to handle image loading
  document.addEventListener("DOMContentLoaded", () => {
    const img = document.getElementById(memberId);
    if (img && img instanceof HTMLImageElement) {
      if (img.complete) {
        img.style.opacity = "1";
      } else {
        img.onload = () => {
          img.style.opacity = "1";
        };
      }
    }
  });
</script>

<script>
  import { gsap } from "gsap";
  import { selectMember } from "@/stores/memberStore";

  document.addEventListener("DOMContentLoaded", () => {
    const teamMembers = document.querySelectorAll(".team-member-gsap");

    teamMembers.forEach((member) => {
      if (!(member instanceof HTMLElement)) return;

      member.addEventListener("click", () => {
        const memberData = member.getAttribute("data-member");
        if (memberData) {
          selectMember(JSON.parse(memberData));
        }
      });

      const chatBubble = member.nextElementSibling;
      if (chatBubble) {
        const bubble1 = chatBubble.querySelector(".bubble1");
        const bubble2 = chatBubble.querySelector(".bubble2");
        const bubble3 = chatBubble.querySelector(".bubble3");

        if (bubble1 && bubble2 && bubble3) {
          // Set initial state
          gsap.set(chatBubble, { visibility: "hidden" });
          gsap.set([bubble1, bubble2, bubble3], { scale: 0 });
          gsap.set(bubble2, { x: -10, y: 15 });
          gsap.set(bubble3, { x: -15, y: 15 });

          // Create timeline for animation
          const tl = gsap.timeline({ paused: true });

          tl.to(chatBubble, { visibility: "visible", duration: 0.01 }).to(
            [bubble1, bubble2, bubble3],
            {
              scale: 1,
              x: 0,
              y: 0,
              duration: 0.3,
              ease: "back.out(1.7)",
              stagger: 0.1,
            },
          );

          // Add event listeners
          member.addEventListener("mouseenter", () => tl.play());
          member.addEventListener("mouseleave", () => tl.reverse());
        }
      }
    });
  });
</script>
