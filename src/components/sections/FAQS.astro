---
import { cn } from "@/lib/utils";
import faqs from "@/config/faqs";
import { faqsSection } from "@/config/site";
import SectionHeading from "@/components/utilities/SectionHeading.astro";
import FaqCategory from "@/components/FAQ/FaqCategory.astro";
import FaqAssets from "@/components/FAQ/FaqAssets.astro";

interface Props {
  className?: string;
  id?: string;
}

const { className, id } = Astro.props;
---

<section
  id={id}
  class={cn(
    "relative z-10 min-h-svh w-full overflow-hidden pt-20 pb-32 sm:px-4 md:px-6  lg:px-16",
    className,
  )}
>
  <FaqAssets />

  <SectionHeading className="faq-heading-text text-center">
    {faqsSection.title}
  </SectionHeading>

  <div
    class="faq-categories mx-auto grid max-w-screen-2xl grid-cols-1 gap-12 px-4 xl:grid-cols-2"
  >
    {faqs.map((category) => <FaqCategory category={category} />)}
  </div>
</section>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { initGsapFade, initGsapPopup } from "@/lib/gsapAnimations";

  gsap.registerPlugin(ScrollTrigger);

  const animateIn = (selector: string, vars: gsap.TweenVars): gsap.core.Tween =>
    gsap.from(selector, {
      ...vars,
      scrollTrigger: { trigger: selector, start: "top 80%" },
    });

  initGsapPopup(".faq-heading-text", {
    duration: 0.8,
    delay: 0.2,
    y: 50,
    animateEachTime: true,
  });

  initGsapFade(".faq-category", {
    direction: "up",
    duration: 1,
    distance: 100,
    delay: 0,
    start: "top bottom",
    animateEachTime: false,
  });

  animateIn(".faq-item", {
    opacity: 0,
    y: 10,
    duration: 0.2,
    stagger: 0.1,
    ease: "power2.out",
  });

  interface OpenFaqs {
    [key: string]: string;
  }

  const openFaqs: OpenFaqs = {};

  document.querySelectorAll<HTMLElement>(".faq-item").forEach((item, index) => {
    item.dataset.id = `faq-${index}`;

    item.addEventListener("click", () => {
      const category = item.dataset.category || "default";
      const id = item.dataset.id;

      if (id) {
        if (openFaqs[category] === id) {
          closeFaq(item);
          delete openFaqs[category];
        } else {
          if (openFaqs[category]) {
            const openItem = document.querySelector<HTMLElement>(
              `[data-id="${openFaqs[category]}"]`,
            );
            if (openItem) closeFaq(openItem);
          }
          openFaqs[category] = id;
          openFaq(item);
        }
      }
    });
  });

  function openFaq(item: HTMLElement): void {
    const answer = item.querySelector<HTMLElement>(".faq-answer");
    const toggle = item.querySelector<HTMLElement>(".faq-toggle");
    if (!answer || !toggle) return;

    answer.style.display = "block";
    gsap.to(item, {
      boxShadow: "0 0 24px rgba(0, 0, 0, 0.10)",
      backgroundColor: "rgba(255, 255, 255, 0.7)",
      duration: 0.3,
      ease: "power2.out",
    });
    gsap.fromTo(
      answer,
      { height: 0, opacity: 0 },
      {
        height: "auto",
        opacity: 1,
        duration: 0.3,
        ease: "power4.out",
      },
    );
    gsap.to(toggle, { rotation: 45, duration: 0.3 });
  }

  function closeFaq(item: HTMLElement): void {
    const answer = item.querySelector<HTMLElement>(".faq-answer");
    const toggle = item.querySelector<HTMLElement>(".faq-toggle");
    if (!answer || !toggle) return;

    gsap.to(toggle, { rotation: 0, duration: 0.3 });
    gsap.to(answer, {
      height: 0,
      opacity: 0,
      duration: 0.3,
      ease: "power2.in",
      onComplete: () => {
        answer.style.display = "none";
      },
    });
    gsap.to(item, {
      boxShadow: "none",
      backgroundColor: "rgba(255, 255, 255, 0.3)",
      duration: 0.3,
    });
  }
</script>
