---
import SectionWrapper from "@/components/layout/SectionWrapper.astro";
import SectionHeading from "@/components/utility/SectionHeading.astro";
import Boat from "../animations/teams/Boat.astro";
import { teams } from "@/config/teams";
import { cn } from "@/lib/utils";
import { getCompartmentSizes, getContainerWidth } from "@/lib/TeamUtils";

interface Props {
  className?: string;
  id?: string;
}

const { className, id } = Astro.props;
---

<SectionWrapper
  id={id}
  className={cn("relative flex flex-col overflow-hidden px-5", className)}
>
  <SectionHeading className="team-heading text-center"
    >Meet Our Team</SectionHeading
  >

  <div class="team-container absolute bottom-0 left-0 h-fit w-full">
    <div
      class="boat-container relative flex h-[150px] w-full gap-10"
      role="list"
      aria-label="Team boats"
    >
      {
        teams.map((team, index) => {
          const memberCount = team.teamMembers.length;
          const [compartment1Count, compartment2Count] =
            getCompartmentSizes(memberCount);
          const containerWidth = getContainerWidth(memberCount);
          const shouldDisplayBoat = memberCount >= 3;

          return (
            shouldDisplayBoat && (
              <Boat
                team={team}
                containerWidth={containerWidth}
                compartment1Count={compartment1Count}
                compartment2Count={compartment2Count}
                index={index}
              />
            )
          );
        })
      }
    </div>
  </div>
</SectionWrapper>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  let marqueeTimeline: gsap.core.Timeline;

  function infiniteScroll() {
    const boatContainer = document.querySelector(
      ".boat-container",
    ) as HTMLElement;
    if (!boatContainer) return;

    const boats = boatContainer.querySelectorAll(".boat");
    const totalWidth = Array.from(boats).reduce(
      (acc, boat) => acc + (boat as HTMLElement).offsetWidth,
      0,
    );

    boats.forEach((boat) => {
      const clone = boat.cloneNode(true) as HTMLElement;
      boatContainer.appendChild(clone);
    });

    gsap.set(boatContainer, { x: window.innerWidth });

    marqueeTimeline = gsap.timeline({ repeat: -1 });

    marqueeTimeline
      .to(boatContainer, {
        x: -(totalWidth + 100),
        duration: 30,
        ease: "none",
      })
      .set(boatContainer, { x: window.innerWidth }, "+=0.01");

    // Add wiggle effect to each boat
    boats.forEach((boat) => {
      gsap.to(boat, {
        yPercent: () => gsap.utils.random(-15, 15),
        rotate: () => gsap.utils.random(-2, 2),
        duration: () => gsap.utils.random(1.5, 2.5),
        repeat: -1,
        yoyo: true,
        ease: "sine.inOut",
      });
    });

    // Add event listeners to team members
    const teamMembers = document.querySelectorAll(
      ".team-member-1, .team-member-2",
    );
    teamMembers.forEach((member) => {
      member.addEventListener("mouseenter", pauseMarquee);
      member.addEventListener("mouseleave", resumeMarquee);
    });
  }

  function pauseMarquee() {
    marqueeTimeline.pause();
  }

  function resumeMarquee() {
    marqueeTimeline.play();
  }

  function animateTeams() {
    const boats = document.querySelectorAll(".boat");

    boats.forEach((boat) => {
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: boat,
          start: "top bottom-=50",
          end: "bottom top",
          toggleActions: "play none none reverse",
        },
      });

      tl.from(boat, {
        scaleY: 0,
        transformOrigin: "center",
        duration: 0.5,
        ease: "power2.out",
      });

      const compartment2Group = boat.querySelector(".compartment-2-group");
      const compartment1Group = boat.querySelector(".compartment-1-group");

      tl.from(compartment2Group, {
        scaleY: 0,
        transformOrigin: "bottom",
        duration: 0.5,
        ease: "back.out(1.7)",
      });

      if (compartment1Group) {
        tl.from(
          compartment1Group,
          {
            scaleY: 0,
            transformOrigin: "bottom",
            duration: 0.5,
            ease: "back.out(1.7)",
          },
          "-=0.3",
        );
      }

      const members = boat.querySelectorAll(".team-member-1, .team-member-2");
      tl.from(
        members,
        {
          scale: 0,
          y: 50,
          stagger: 0.1,
          duration: 0.5,
          ease: "back.out(1.7)",
        },
        "-=0.5",
      );
    });

    gsap.from(".team-heading", {
      y: 50,
      opacity: 0,
      duration: 1,
      ease: "power3.out",
      scrollTrigger: {
        trigger: ".team-heading",
        start: "top bottom-=100",
        end: "bottom top",
        toggleActions: "play none none reverse",
      },
    });
  }

  function animateFlagOnHover() {
    const boats = document.querySelectorAll(".boat");

    boats.forEach((boat) => {
      const flagContainer = boat.querySelector(".flag-container");
      const flag = flagContainer?.querySelector(".flag");
      const flagpole = flagContainer?.querySelector(".flagpole");

      if (flag && flagpole) {
        // Set initial state
        gsap.set(flag, { autoAlpha: 0, y: -50 });
        gsap.set(flagpole, { autoAlpha: 0, y: 50 });

        boat.addEventListener("mouseenter", () => {
          gsap.to(flag, {
            autoAlpha: 1,
            y: 0,
            duration: 0.5,
            ease: "back.out(1.7)",
          });
          gsap.to(flagpole, {
            autoAlpha: 1,
            y: 0,
            duration: 0.5,
            ease: "back.out(1.7)",
          });
        });

        boat.addEventListener("mouseleave", () => {
          gsap.to(flag, {
            autoAlpha: 0,
            y: -50,
            duration: 0.3,
            ease: "power2.in",
          });
          gsap.to(flagpole, {
            autoAlpha: 0,
            y: 50,
            duration: 0.3,
            ease: "power2.in",
          });
        });
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    animateTeams();
    infiniteScroll();
    animateFlagOnHover();
  });
</script>
