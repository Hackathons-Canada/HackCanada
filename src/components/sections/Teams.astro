---
import SectionWrapper from "@/components/layout/SectionWrapper.astro";
import SectionHeading from "@/components/utility/SectionHeading.astro";
import Boat from "@/components/animations/teams/Boat.astro";
import Wave from "@/components/animations/teams/Wave.astro";
import { teams } from "@/config/teams";
import { cn } from "@/lib/utils";
import { getCompartmentSizes, getContainerWidth } from "@/lib/TeamUtils";
import { teamSection } from "@/config/site";
import Prose from "@/components/utility/Prose.astro";

interface Props {
  className?: string;
  id?: string;
}

const { className, id } = Astro.props;
---

<SectionWrapper
  id={id}
  className={cn("relative flex flex-col overflow-hidden px-5", className)}
>
  <SectionHeading className="team-heading text-center"
    >{teamSection.title}</SectionHeading
  >
  <Prose className="text-center" set:html={teamSection.tagline} />
  <div class="team-container absolute bottom-0 left-0 h-fit w-full">
    <div
      class="boat-container relative flex h-[150px] w-fit gap-[40px]"
      role="list"
      aria-label="Team boats"
    >
      {
        teams.map((team, index) => {
          const memberCount = team.teamMembers.length;
          const [compartment1Count, compartment2Count] =
            getCompartmentSizes(memberCount);
          const containerWidth = getContainerWidth(memberCount);
          const shouldDisplayBoat = memberCount >= 3;

          return (
            shouldDisplayBoat && (
              <Boat
                team={team}
                containerWidth={containerWidth}
                compartment1Count={compartment1Count}
                compartment2Count={compartment2Count}
                index={index}
              />
            )
          );
        })
      }
    </div>
  </div>
  <Wave />
</SectionWrapper>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  let marqueeTimeline: gsap.core.Timeline;
  function setupInfiniteScroll() {
    const boatContainer = document.querySelector(".boat-container");
    if (!boatContainer) return;

    const boats = boatContainer.children;
    const gap = 40;
    const totalWidth = Array.from(boats).reduce(
      (acc, boat) => acc + (boat as HTMLElement).offsetWidth + gap,
      0,
    );

    // Clone boats and append to the container
    Array.from(boats).forEach((boat) => {
      const clone = boat.cloneNode(true);
      boatContainer.appendChild(clone);
    });

    // Set initial position
    gsap.set(boatContainer, { x: 0 });

    // Create the marquee animation
    const duration = 30; // Adjust this value to control the speed
    const marqueeAnimation = gsap.to(boatContainer, {
      x: -totalWidth,
      duration: duration,
      ease: "none",
      repeat: -1,
      onRepeat: () => {
        gsap.set(boatContainer, { x: 0 });
      },
    });

    // Play the animation
    marqueeAnimation.play();

    // Add scroll-based speed control
    ScrollTrigger.create({
      trigger: boatContainer,
      start: "top bottom",
      end: "bottom top",
      onUpdate: (self) => {
        const scrollSpeed = Math.abs(self.getVelocity() / 1000);
        const newDuration = gsap.utils.clamp(30, 120, duration - scrollSpeed);
        marqueeAnimation.timeScale(duration / newDuration);
      },
    });
  }
  function addWiggleEffect() {
    gsap.utils.toArray<HTMLElement>(".boat").forEach((boat) => {
      gsap.to(boat, {
        yPercent: () => gsap.utils.random(-15, 15),
        rotate: () => gsap.utils.random(-2, 2),
        duration: () => gsap.utils.random(1.5, 2.5),
        repeat: -1,
        yoyo: true,
        ease: "sine.inOut",
      });
    });
  }

  function addClickAnimation() {
    gsap.utils.toArray<HTMLElement>(".boat").forEach((boat) => {
      let currentAnimation: gsap.core.Timeline | null = null;
      const initialY = gsap.getProperty(boat, "y") as number;

      boat.addEventListener("click", () => {
        if (currentAnimation) currentAnimation.kill();

        currentAnimation = gsap
          .timeline()
          .to(boat, {
            y: initialY + 30,
            duration: 0.3,
            ease: "power2.out",
          })
          .to(boat, {
            y: initialY,
            duration: 2,
            ease: "elastic.out(1.5,0.3)",
            onComplete: () => {
              currentAnimation = null;
            },
          });
      });
    });
  }

  function setupTeamMemberInteractions() {
    const teamMembers = document.querySelectorAll(
      ".team-member-1, .team-member-2",
    );
    teamMembers.forEach((member) => {
      member.addEventListener("mouseenter", () => marqueeTimeline?.pause());
      member.addEventListener("mouseleave", () => marqueeTimeline?.play());
    });
  }

  function animateBoat(boat: Element | unknown) {
    if (!(boat instanceof Element)) return;
    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: boat,
        start: "top bottom-=50",
        end: "bottom top",
        toggleActions: "play none none reverse",
      },
    });

    tl.from(boat, {
      scale: 0,
      transformOrigin: "center bottom",
      duration: 0.5,
      ease: "power2.out",
    });

    const compartments = [".compartment-2-group", ".compartment-1-group"];
    compartments.forEach((compartment) => {
      const element = boat.querySelector(compartment);
      if (element) {
        tl.from(
          element,
          {
            scaleY: 0,
            transformOrigin: "bottom",
            duration: 0.5,
            ease: "back.out(1.7)",
          },
          "-=0.3",
        );
      }
    });

    const members = boat.querySelectorAll(".team-member-1, .team-member-2");
    tl.from(
      members,
      {
        scale: 0,
        y: 50,
        stagger: 0.1,
        duration: 0.5,
        ease: "back.out(1.7)",
      },
      "-=0.5",
    );

    const flag = boat.querySelector(".flag");
    const flagpole = boat.querySelector(".flagpole");
    if (flag && flagpole) {
      gsap.set([flag, flagpole], { autoAlpha: 0, y: 20 });
      tl.to(
        [flagpole, flag],
        {
          autoAlpha: 1,
          y: 0,
          duration: 0.5,
          ease: "back.out(1.7)",
          stagger: 0.1,
        },
        "-=0.3",
      );

      compartments.forEach((compartment) => {
        const element = boat.querySelector(compartment);
        if (element) {
          element.addEventListener("mouseenter", () => {
            gsap.to([flagpole, flag], {
              y: 10,
              duration: 0.3,
              ease: "power2.out",
            });
          });
          element.addEventListener("mouseleave", () => {
            gsap.to([flagpole, flag], {
              y: 0,
              duration: 0.3,
              ease: "power2.out",
            });
          });
        }
      });
    }
  }

  function animateTeams() {
    gsap.utils.toArray(".boat").forEach(animateBoat);
    gsap.from(".team-heading", {
      y: 50,
      opacity: 0,
      duration: 1,
      ease: "power3.out",
      scrollTrigger: {
        trigger: ".team-heading",
        start: "top bottom-=100",
        end: "bottom top",
        toggleActions: "play none none reverse",
      },
    });
  }

  function initializeAnimations() {
    setupInfiniteScroll();
    addWiggleEffect();
    addClickAnimation();
    setupTeamMemberInteractions();
    animateTeams();
  }

  document.addEventListener("DOMContentLoaded", initializeAnimations);
</script>
