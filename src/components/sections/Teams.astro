---
import SectionWrapper from "@/components/utilities/SectionWrapper.astro";
import SectionHeading from "@/components/utilities/SectionHeading.astro";
import Boat from "@/components/animations/teams/Boat.astro";
import { teams } from "@/config/teams";
import { cn } from "@/lib/utils";
import { getCompartmentSizes, getContainerWidth } from "@/lib/TeamUtils";
import { teamSection } from "@/config/site";
import Prose from "@/components/common/Prose.astro";
import Wave from "@/components/animations/teams/Wave.astro";
import TeamMemberModal from "@/components/animations/teams/card/TeamMemberModal";

interface Props {
  className?: string;
  id?: string;
}

const { className, id } = Astro.props;
---

<SectionWrapper
  id={id}
  className={cn(
    "flex h-[750px] flex-col items-center overflow-hidden px-5 pt-20",
    className,
  )}
>
  <SectionHeading className="team-heading z-10 text-center"
    >{teamSection.title}</SectionHeading
  >
  <Prose className="z-10 text-center" set:html={teamSection.tagline} />
  <div class="team-container absolute bottom-0 left-0 h-fit w-full">
    <div
      class="boat-container relative flex h-[150px] w-fit gap-[40px]"
      role="list"
      aria-label="Team boats"
    >
      {
        teams.map((team, index) => {
          const memberCount = team.teamMembers.length;
          const [compartment1Count, compartment2Count] =
            getCompartmentSizes(memberCount);
          const containerWidth = getContainerWidth(memberCount);
          const shouldDisplayBoat = memberCount > 2;

          return (
            shouldDisplayBoat && (
              <Boat
                team={team}
                containerWidth={containerWidth}
                compartment1Count={compartment1Count}
                compartment2Count={compartment2Count}
                index={index}
              />
            )
          );
        })
      }
    </div>
  </div>
  <Wave />
  <TeamMemberModal client:only="react" />
</SectionWrapper>
<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { selectMember } from "@/stores/memberStore";

  gsap.registerPlugin(ScrollTrigger);

  let marqueeAnimation: gsap.core.Tween;

  function setupInfiniteScroll() {
    const boatContainer = document.querySelector(".boat-container");
    if (!boatContainer) return;

    const boats = boatContainer.children;
    const gap = 40;
    const totalWidth = Array.from(boats).reduce(
      (acc, boat) => acc + (boat as HTMLElement).offsetWidth + gap,
      0,
    );

    // Clone boats and append to the container while preserving event listeners
    Array.from(boats).forEach((boat) => {
      const clone = boat.cloneNode(true) as HTMLElement;
      // Reattach event listeners to cloned elements
      const members = clone.querySelectorAll<HTMLElement>(".team-member-gsap");
      members.forEach((member: HTMLElement) => {
        member.addEventListener("click", () => {
          const memberData = member.getAttribute("data-member");
          if (memberData) {
            selectMember(JSON.parse(memberData));
          }
        });
      });
      boatContainer.appendChild(clone);
    });

    // Set initial position
    gsap.set(boatContainer, { x: 0 });

    // Create the marquee animation
    const duration = 30; // Adjust this value to control the speed
    marqueeAnimation = gsap.to(boatContainer, {
      x: -totalWidth,
      duration: duration,
      ease: "none",
      repeat: -1,
      paused: true, // Start paused
    });

    // Use ScrollTrigger to start the animation when the section comes into view
    ScrollTrigger.create({
      trigger: ".team-container",
      start: "top bottom",
      onEnter: () => marqueeAnimation.play(),
      onLeaveBack: () => marqueeAnimation.pause(),
    });
  }

  function addWiggleEffect() {
    gsap.utils.toArray<HTMLElement>(".boat").forEach((boat) => {
      gsap.to(boat, {
        yPercent: "random(-15, 15)",
        rotate: "random(-2, 2)",
        duration: "random(1.5, 2.5)",
        repeat: -1,
        yoyo: true,
        ease: "sine.inOut",
      });
    });
  }

  function setupTeamMemberInteractions() {
    const teamMembers = document.querySelectorAll(
      ".team-member-1, .team-member-2, .team-member-gsap",
    );
    teamMembers.forEach((member) => {
      member.addEventListener("mouseenter", () => marqueeAnimation?.pause());
      member.addEventListener("mouseleave", () => marqueeAnimation?.play());
    });
  }

  function animateBoat(boat: Element | unknown) {
    if (!(boat instanceof Element)) return;

    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: boat,
        start: "top bottom",
        end: "bottom top",
        toggleActions: "play none none reverse",
      },
    });

    tl.from(boat, {
      scale: 0,
      transformOrigin: "center bottom",
      duration: 0.5,
      ease: "power2.out",
    });

    const compartments = boat.querySelectorAll(
      ".compartment-2-group, .compartment-1-group",
    );
    tl.from(
      compartments,
      {
        scaleY: 0,
        transformOrigin: "bottom",
        duration: 0.5,
        ease: "back.out(1.7)",
        stagger: 0.1,
      },
      "-=0.3",
    );

    const members = boat.querySelectorAll(".team-member-1, .team-member-2");
    tl.from(
      members,
      {
        scale: 0,
        y: 50,
        stagger: 0.1,
        duration: 0.5,
        ease: "back.out(1.7)",
      },
      "-=0.5",
    );

    const flag = boat.querySelector(".flag");
    const flagpole = boat.querySelector(".flagpole");
    if (flag && flagpole) {
      gsap.set([flag, flagpole], { autoAlpha: 0, y: 20 });
      tl.to(
        [flagpole, flag],
        {
          autoAlpha: 1,
          y: 0,
          duration: 0.5,
          ease: "back.out(1.7)",
          stagger: 0.1,
        },
        "-=0.3",
      );

      compartments.forEach((compartment) => {
        compartment.addEventListener("mouseenter", () => {
          gsap.to([flagpole, flag], {
            y: 10,
            duration: 0.3,
            ease: "power2.out",
          });
        });
        compartment.addEventListener("mouseleave", () => {
          gsap.to([flagpole, flag], {
            y: 0,
            duration: 0.3,
            ease: "power2.out",
          });
        });
      });
    }
  }

  function animateTeams() {
    gsap.utils.toArray(".boat").forEach(animateBoat);
    gsap.from(".team-heading", {
      y: 50,
      opacity: 0,
      duration: 1,
      ease: "power3.out",
      scrollTrigger: {
        trigger: ".team-heading",
        start: "top bottom-=100",
        end: "bottom top",
        toggleActions: "play none none reverse",
      },
    });
  }

  function initializeAnimations() {
    setupInfiniteScroll();
    addWiggleEffect();
    setupTeamMemberInteractions();
    animateTeams();
  }

  // Use requestIdleCallback for non-critical initialization
  if ("requestIdleCallback" in window) {
    requestIdleCallback(initializeAnimations);
  } else {
    setTimeout(initializeAnimations, 1);
  }
</script>
