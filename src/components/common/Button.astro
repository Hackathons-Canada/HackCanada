---
// Button.astro
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-full text-sm font-medium transition-all duration-300 disabled:opacity-50 disabled:pointer-events-none transform cursor-pointer",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        errorPage:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        hero: "bg-blue-950/90 tracking-widest border-blue-950 border-2 text-white ease-in-out hover:bg-blue-950/80 hover:shadow-lg",
        sponsor:
          "bg-yellow-200 px-6 py-3 font-bold text-yellow-800 shadow-lg hover:scale-110 hover:bg-yellow-300 active:scale-95",
        modalContent:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 px-3",
        lg: "h-11 px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface Props extends VariantProps<typeof buttonVariants> {
  link?: string;
  class?: string;
  id?: string;
  type?: "button" | "submit" | "reset";
}

const {
  variant,
  size,
  link,
  id,
  type = "button",
  class: className,
  ...rest
} = Astro.props;

const classes = cn(buttonVariants({ variant, size, className }));
---

{
  link ? (
    <a class={classes} href={link} id={id} {...rest}>
      <slot />
    </a>
  ) : (
    <button class={classes} id={id} type={type} {...rest}>
      <slot />
    </button>
  )
}

<script>
  // If we need any client-side JavaScript in future
</script>
